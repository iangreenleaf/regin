#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.6
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'reginald/tokenizer'
module Reginald
  class Parser < Racc::Parser
##### State transition tables begin ###

racc_action_table = [
     5,    13,    11,     6,     7,     9,    38,    10,    36,    37,
     5,    12,    11,     6,     7,     9,    39,    10,    29,    27,
     5,    12,    11,     6,     7,     9,    35,    10,    43,    44,
     5,    12,    11,     6,     7,     9,    45,    10,    46,   nil,
     5,    12,    11,     6,     7,     9,    26,    10,    18,   nil,
   nil,    12,    18,   nil,    16,    17,    19,   nil,    16,    17,
    19,    30,   nil,   nil,    32,    31,    33,    40,   nil,   nil,
    32,    31,    33,    21,   nil,    23,    22,    24,    23,    22,
    24 ]

racc_action_check = [
     0,     1,     0,     0,     0,     0,    29,     0,    26,    26,
    37,     0,    37,    37,    37,    37,    29,    37,    19,    13,
     2,    37,     2,     2,     2,     2,    25,     2,    38,    41,
    36,     2,    36,    36,    36,    36,    42,    36,    43,   nil,
    10,    36,    10,    10,    10,    10,    10,    10,     3,   nil,
   nil,    10,    14,   nil,     3,     3,     3,   nil,    14,    14,
    14,    20,   nil,   nil,    20,    20,    20,    34,   nil,   nil,
    34,    34,    34,     5,   nil,     5,     5,     5,    21,    21,
    21 ]

racc_action_pointer = [
    -2,     1,    18,    40,   nil,    69,   nil,   nil,   nil,   nil,
    38,   nil,   nil,    19,    44,   nil,   nil,   nil,   nil,    11,
    58,    72,   nil,   nil,   nil,    16,    -3,   nil,   nil,    -1,
   nil,   nil,   nil,   nil,    64,   nil,    28,     8,    21,   nil,
   nil,    19,    26,    21,   nil,   nil,   nil ]

racc_action_default = [
   -29,   -29,    -1,    -5,    -6,   -29,    -9,   -10,   -11,   -12,
   -29,   -22,   -23,   -29,    -3,    -4,   -24,   -25,   -26,   -29,
   -29,   -29,   -16,   -17,   -18,   -29,   -29,    47,    -2,   -29,
    -7,   -13,   -14,   -15,   -29,   -19,   -29,   -29,   -29,   -28,
    -8,   -29,   -29,   -29,   -20,   -21,   -27 ]

racc_goto_table = [
     1,    20,    15,    14,   nil,   nil,   nil,   nil,   nil,   nil,
    25,   nil,   nil,    28,   nil,   nil,   nil,    34,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    41,    42 ]

racc_goto_check = [
     1,     6,     4,     3,   nil,   nil,   nil,   nil,   nil,   nil,
     1,   nil,   nil,     4,   nil,   nil,   nil,     6,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,     1,     1 ]

racc_goto_pointer = [
   nil,     0,   nil,     1,    -1,   nil,    -4,   nil ]

racc_goto_default = [
   nil,   nil,     2,     3,   nil,     4,   nil,     8 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 19, :_reduce_1,
  3, 20, :_reduce_2,
  2, 20, :_reduce_3,
  2, 20, :_reduce_4,
  1, 20, :_reduce_none,
  1, 21, :_reduce_none,
  3, 21, :_reduce_7,
  4, 21, :_reduce_8,
  1, 21, :_reduce_9,
  1, 21, :_reduce_10,
  1, 21, :_reduce_11,
  1, 21, :_reduce_12,
  2, 24, :_reduce_13,
  2, 24, :_reduce_14,
  2, 24, :_reduce_15,
  1, 24, :_reduce_none,
  1, 24, :_reduce_none,
  1, 24, :_reduce_none,
  3, 23, :_reduce_19,
  5, 23, :_reduce_20,
  5, 23, :_reduce_21,
  1, 25, :_reduce_none,
  1, 25, :_reduce_none,
  1, 22, :_reduce_none,
  1, 22, :_reduce_none,
  1, 22, :_reduce_none,
  5, 22, :_reduce_27,
  3, 22, :_reduce_28 ]

racc_reduce_n = 29

racc_shift_n = 47

racc_token_table = {
  false => 0,
  :error => 1,
  :LBRACK => 2,
  :RBRACK => 3,
  :L_ANCHOR => 4,
  :CHAR_CLASS => 5,
  :DOT => 6,
  :CHAR => 7,
  :QMARK => 8,
  :LPAREN => 9,
  :RPAREN => 10,
  :COLON => 11,
  :NAME => 12,
  :R_ANCHOR => 13,
  :STAR => 14,
  :PLUS => 15,
  :LCURLY => 16,
  :RCURLY => 17 }

racc_nt_base = 18

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "LBRACK",
  "RBRACK",
  "L_ANCHOR",
  "CHAR_CLASS",
  "DOT",
  "CHAR",
  "QMARK",
  "LPAREN",
  "RPAREN",
  "COLON",
  "NAME",
  "R_ANCHOR",
  "STAR",
  "PLUS",
  "LCURLY",
  "RCURLY",
  "$start",
  "expression",
  "branch",
  "atom",
  "quantifier",
  "group",
  "bracket_expression",
  "anchor" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

def _reduce_1(val, _values, result)
 result = Expression.new(val[0]) 
    result
end

def _reduce_2(val, _values, result)
            val[1].quantifier = val[2]
            result = Node.new(val[0], val[1])
          
    result
end

def _reduce_3(val, _values, result)
 result = Node.new(val[0], val[1]) 
    result
end

def _reduce_4(val, _values, result)
            val[0].quantifier = val[1]
            result = val[0]
          
    result
end

# reduce 5 omitted

# reduce 6 omitted

def _reduce_7(val, _values, result)
 result = CharacterRange.new(val[1]) 
    result
end

def _reduce_8(val, _values, result)
 result = CharacterRange.new(val[2]); result.negate = true 
    result
end

def _reduce_9(val, _values, result)
 result = CharacterRange.new(val[0]) 
    result
end

def _reduce_10(val, _values, result)
 result = CharacterRange.new(val[0]) 
    result
end

def _reduce_11(val, _values, result)
 result = Anchor.new(val[0]) 
    result
end

def _reduce_12(val, _values, result)
 result = Character.new(val[0]) 
    result
end

def _reduce_13(val, _values, result)
 result = val.join 
    result
end

def _reduce_14(val, _values, result)
 result = val.join 
    result
end

def _reduce_15(val, _values, result)
 result = val.join 
    result
end

# reduce 16 omitted

# reduce 17 omitted

# reduce 18 omitted

def _reduce_19(val, _values, result)
 result = Group.new(val[1]) 
    result
end

def _reduce_20(val, _values, result)
 result = Group.new(val[3]); result.capture = false 
    result
end

def _reduce_21(val, _values, result)
 result = Group.new(val[3]); result.name = val[2] 
    result
end

# reduce 22 omitted

# reduce 23 omitted

# reduce 24 omitted

# reduce 25 omitted

# reduce 26 omitted

def _reduce_27(val, _values, result)
 result = val.join 
    result
end

def _reduce_28(val, _values, result)
 result = val.join 
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
end   # module Reginald
